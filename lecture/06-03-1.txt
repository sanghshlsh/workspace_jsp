Project Test060301

10.jstl
Core Library
	-foreach문
<c:foreach items:"${x}" var="y">
${y}
list or array x의 y라는 인덱스를 el문으로 호출
</c:foreach>
map의 key와 value를 출력하는 el문은
<c:forEach items="${map}" var="dto">
	${dto.key }  ${dto.value }
</c:forEach>

paging - foreach문
<c:foreach begin="1" end="10" var="num" step="1" varstatus="status">
num은 begin1 end10 순서대로 step 1씩커짐 status를 통해 current/index/count 호출 가능
${status.index} index 0시작
${status.count} count 1시작


	-if문
<c:if test="${조건식}">	단순 if문만 사용가능
//if else문 다중if문을 사용하고 싶으면 c:if를 더 사용하라

	-choose문	/switch-case or 다중 if문과 매우 유사
<c:choose>
	<c:when test="${}"></c:when>
	<c:when test="${}"></c:when>
	<c:otherwise></c:otherwise>
</c:choose>

	-set/out
<c:set var="page" value="pageContext" scope="page"/>
${page}->vlaue출력
<c:out value="${page}"/> el문과 동일하지만 너무 길어 사장된케이스

===========================================================================================

Project IOTest

File class
-file/folder(directory)를 관리하는 기능이 있는 클래스
-file을 삭제 할 수 있게 함(생성x 삭제o)
-folder(directory)를 생성/삭제(생성o 삭제o)

File f1 = new File("경로");
경로상의 파일/폴더를 가르키는 객체 f1선언
new File("경로");
new File("경로","폴더/파일"); 자주사용한다. 경로에 File객체를 넣어서 짧게 사용 가능

-경로 구분자 File.separator	-운영체계에 맞게 설정된다.
	file객체.exists();	-!file객체.exists();가 자주사용됨
		.mkdir();	-directory(folder)생성
		.delete();	-file/folder(directory)삭제
		.renameTo(file dest);
===========================================================================================

Stream
			      (Stream)
			     Reader(char stream)
			  InputStream(byte stream)
java program		 <--------데이터-----			장치
			 -------데이터------>		(메모리/드라이브/프린터기/
			  OutputStream(byte stream)	네트워크(서버)/타PC/마우스/
			     Writer(char stream)	키보드/모니터/파일 등등....)


Stream 객체는 Input기능만 있거나 Output기능만 있다.
입출력을 동시에 하는 기능은 없다. - input/output stream 각각 존재

Stream의 종류 / 기준에 따라 분류
1. 전송되는 데이터 크기에 따른 분류
-byte stream	: 1byte전송 : stream이름이 ~Stream
(Input/OutputStream/ DataInputStream등)
-문자(char)steram: 2byte전송 : stream 이름이 ~er
(Reader/Writer/FileRedaer/FileWriter/InputStreamReader등)
문자스트림은 멀티미디어(영상/사진등)의 파일등은 전송하지 못한다.
txt파일 또한 byte stream이 더 많이 사용되는데 그 이유는 기존 장비 대부분이 byte stream을 지원하기 떄문

2.특별한 기능의 존재 여부에 따른 분류 (<--> 장치와 직접 연결이 되는지 여부에 따른 분류)
특별한 기능이 있다면 장치와 직접연결 불가 // 정확히 알기 위해선 java api를 봐야 한다.
//문자스트림의 경우 거의 다 node stream인데 특별한 기능도 있고 장치에도 직접연결한 경우가 많다. 정확히 파악하려면 java api를 참고할 것
-node stream : 특별기능x 장치직접연결o
(FileInputStream/FileOutputStream등)
-filter stream: 특별기능o 장치직접연결x
(BuffuerdInputStream등)


===========================================================================================
파일복사 스트림의 기본 구조

		<--inputStream-----		장치1(원본)
java program					
		---outputStream--->		장치2(copy)




byte stream

public void me(){
- 복사하고자하는 원본과 복사 받을 대상을 가르키는 파일 객체 두가지를 생성
File f1 = new File("원본파일위치");
File f2 = new File("복사파일위치");
-input/ouputstream 선언 - 반드시 close해야하고 try-catch-finally를 통해야 하기에 미리 선언
InputStream in = null;
OutputStream out = null;
-전송을 위한 변수 생성 (byte형으로 주고 받지만 int형으로 선언-1byte씩 옮길때 byte[]로 선언하면 여러 byte를 묶어서 전송)
int what = -1;// 입력받을 테이터가 없다면 -1반환

try{
//stream 생성
//f1이 원본이고 원본에서 데이터를 입력받아 f2에 출력해줄것이기에 f1이 fileinputstream
in = new FileInputStream(f1);
out = new FileOutputStream(f2);

//데이터 입출력
while(true){
what = in.read();
//데이터 입력받기(원본에서 받아온 byte1개) 일반적으로 byte[]로 묶어서 받는다면 leng이라는 변수명으로 받고 int.read(arr); 배열을 read method에 parameter값으로 넣어준다.
묶어서 받는다면 read에서arr에 leng 개의 byte형 데이터를 입력받는다.

if(what==-1){
break
}//더이상 받아올 데이터 없으면 반복문종료

out.write(what); //데이터 출력 묶어서 받는다면
out.write(arr,0,leng)을 사용해0~leng개의 arr에 있는 데이터를 출력한다. 

}




} catch(Exception e){
e.printStackTrace();
} finally{

//stream이 chain이라면 close순서가 상관있지만 지금은 아니기때문에 상관없다.
//input output stream을 각각 try-catch해도 되지만 너무 길기에 묶어서 한다. mms의 dao에서도 이 이유로 묶어서 했다.

try{
if(in!=null)in.close;if(out!=null)out.close;	
}catch(IOException e){
e.printStackTrace();
}
}


}
